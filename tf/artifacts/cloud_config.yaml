#cloud-config
coreos:
  units:
    - name: format-disk.service
      command: start
      content: |
        [Unit]
        Description=Formats the disk drive
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        Environment="LABEL=var-lib-docker"
        Environment="DEV=/dev/sdb"
        # Do not wipe the disk if it's already being used, so the docker images persistent cross reboot.
        ExecStart=-/bin/bash -c "if ! findfs LABEL=$LABEL > /tmp/label.$LABEL; \
          then wipefs -a -f $DEV && mkfs.ext4 -T news -F -L $LABEL $DEV && echo wiped; fi"
    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=Mount disk to /var/lib/docker
        Requires=format-disk.service
        After=format-disk.service
        Before=docker.service
        [Mount]
        What=/dev/sdb
        Where=/var/lib/docker
        Type=ext4
    - name: docker.service
      command: start
      drop-ins:
        - name: 60-docker-wait-for-var-lib.conf
          content: |
              [Unit]
              Requires=var-lib-docker.mount
              After=var-lib-docker.mount
              [Service]
              Restart=always
              RestartSec=5
    - name: get-app-image.service
      command: start
      content: |
        [Unit]
        Description=Download app image from google cloud storage
        [Service]
        Type=oneshot
        Environment="AUTH_URL=http://metadata/computeMetadata/v1/instance/service-accounts/default/token"
        Environment="OBJECT_URL=https://www.googleapis.com/storage/v1/b/ha-demo-bucket/o/app-image?alt=media"
        Environment="DES_DIR=/var/lib/apps/nodeapp"
        ExecStart=/bin/bash -c "mkdir -p $DES_DIR ; \
          token=$(curl -s -H 'Metadata-Flavor: Google' $AUTH_URL | jq '.access_token' -r) ; \
          curl -s -H \"Authorization: Bearer $token\" -o $DES_DIR/app-image.jpg $OBJECT_URL"
    - name: nodeapp.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=nodeapp
        Require=docker.service
        After=docker.service
        [Service]
        ExecStartPre=-/usr/bin/docker rm -f nodeapp
        ExecStart=/bin/bash -c "docker run --rm --name nodeapp -p 80:8000 \
          -e COREOS_PUBLIC_IPV4=$public_ipv4 -e INSTANCE_ID=%H xueshanf/docker-nodeapp:latest"
        ExecStop=-/usr/bin/docker stop nodeapp
        RestartSec=5
        Restart=always

write_files:
  - path: /etc/profile.d/alias.sh
    content: |
        alias lal="ls -al"
        alias ll="ls -l"
        alias sd="sudo systemctl"
        alias sdl="sd list-units"
        alias sds="sd status"
        alias sdcat="sd cat"
        alias j="sudo journalctl"
        alias jfu="j -f -u"
        alias dk="docker "
        alias dkc="dk ps"
        alias dkm="dk images"
        alias dki="dk inspect"
        alias dkb="dk build"
        alias dke="dk exec"
        function dkip() { docker inspect --format "{{ .NetworkSettings.IPAddress }}" $1 ; }
        function dkid() { docker inspect --format "{{ .ID }}" $1 ; }
# end of files




